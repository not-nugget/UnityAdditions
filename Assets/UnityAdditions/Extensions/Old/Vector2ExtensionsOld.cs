namespace UnityAdditions.Old.Vector2
{
    using UnityEngine;

    /// <summary>
    /// Suite of extension methods for randomizing the x and y values of any vector 2
    /// </summary>
    public static class Vector2Extensions
    {
        #region Vector2 Randomization
        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <param name="v">Vector2 isntance this method operates on</param>
        /// <param name="posNegRange">Vector range between -x to x and -y to y</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this ref Vector2 v, Vector2 posNegRange, bool suppressWarnings = false)
        {
            if (posNegRange == Vector2.zero)
            {
                if (!suppressWarnings || !UnityAdditionsSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with {posNegRange} whos values were Zero, no action was taken");
                return;
            }

            v.x = (posNegRange.x == 0) ? 0 : Random.Range(-posNegRange.x, posNegRange.x);
            v.y = (posNegRange.y == 0) ? 0 : Random.Range(-posNegRange.y, posNegRange.y);
        }

        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <param name="v">Vector2 isntance this method operates on</param>
        /// <param name="lowerBound"></param>
        /// <param name="upperBound"></param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this ref Vector2 v, Vector2 lowerBound, Vector2 upperBound, bool suppressWarnings = false)
        {
            if (lowerBound == upperBound)
            {
                if (!suppressWarnings || !UnityAdditionsSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with lowerBound:{lowerBound} and upperBound:{upperBound} whos values are equal, no action was taken");
                return;
            }

            if (upperBound.x < lowerBound.x || upperBound.y < lowerBound.y)
            {
                if (!UnityAdditionsSettings.SuppressErrors)
                    Debug.LogError($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with lowerBound:{lowerBound} who possessed a value greater than the corresponding value in upperBound:{upperBound}");
                return;
            }

            v.x = (lowerBound.x == upperBound.x) ? lowerBound.x : Random.Range(lowerBound.x, upperBound.x);
            v.y = (lowerBound.y == upperBound.y) ? lowerBound.y : Random.Range(lowerBound.y, upperBound.y);
        }

        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <param name="v">Vector2 isntance this method operates on</param>
        /// <param name="xRange"></param>
        /// <param name="yRange"></param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this ref Vector2 v, float xRange = 0f, float yRange = 0f, bool suppressWarnings = false)
        {
            if (xRange == 0 && yRange == 0)
            {
                if (!suppressWarnings || !UnityAdditionsSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with {xRange} and {yRange} whos values were Zero, no action was taken");
                return;
            }

            v.x = (xRange == 0) ? 0 : Random.Range(-xRange, xRange);
            v.y = (yRange == 0) ? 0 : Random.Range(-yRange, yRange);
        }

        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <param name="v">Vector2 isntance this method operates on</param>
        /// <param name="xLower"></param>
        /// <param name="xUpper"></param>
        /// <param name="yLower"></param>
        /// <param name="yUpper"></param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void Randomizevalues(this ref Vector2 v, float xLower = 0f, float xUpper = 0f, float yLower = 0f, float yUpper = 0f, bool suppressWarnings = false)
        {
            if (xLower == xUpper && yLower == yUpper)
            {
                if (!suppressWarnings || !UnityAdditionsSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with xLower:{xLower}, xUpper:{xUpper}, yLower:{yLower} and yUpper:{yUpper} whos values were Zero, no action was taken");
                return;
            }

            if (xUpper < xLower || yUpper < yLower)
            {
                if (!UnityAdditionsSettings.SuppressErrors)
                    Debug.LogError($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with xLower:{xLower} and yLower:{yLower} who possessed a value greater than the corresponding value of xUpper:{xUpper} or yUpper{yUpper}");
                return;
            }

            v.x = (xLower == xUpper) ? xLower : Random.Range(xLower, xUpper);
            v.y = (yLower == yUpper) ? yLower : Random.Range(yLower, yUpper);
        }

        /// <summary>
        /// Randomize the values of a vector within a provided rectangle. NOTE: Provided coordinates will be in WORLD COORDINATES, as Rect stores
        /// its coordinates as such.
        /// </summary>
        /// <param name="v">Vector2 isntance this method operates on</param>
        /// <param name="randomizeInside">Rectangle to keep the vector inside</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeInside(this ref Vector2 v, Rect randomizeInside, bool suppressWarnings = false)
        {
            if (randomizeInside.size == Vector2.zero)
            {
                if (!suppressWarnings || !UnityAdditionsSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector2Extensions)}.{nameof(RandomizeInside)} was called with a rect:{randomizeInside} who's size was zero, no action was taken");
                return;
            }

            Vector2 min = randomizeInside.min, max = randomizeInside.max;
            v.x = (min.x == max.x) ? min.x : Random.Range(min.x, max.x);
            v.y = (min.y == max.y) ? min.y : Random.Range(min.y, max.y);
        }
        #endregion

        #region Vector2 Clamping
        /// <summary>
        /// Ensure a vector's individual values never become greater than 1 or less than 0
        /// </summary>
        /// <param name="v">Vector2 instance this method operates on</param>
        public static void ClampValues01(this ref Vector2 v)
        {
            v.x = (v.x < 0f) ? 0 : (v.x > 1f) ? 1 : v.x;
            v.y = (v.y < 0f) ? 0 : (v.y > 1f) ? 1 : v.y;
        }

        /// <summary>
        /// Ensure a vector's individual values never fall below zero
        /// </summary>
        /// <param name="v">Vector2 instance this method operates on</param>
        public static void ClampValuesPositive(this ref Vector2 v)
        {
            v.x = (v.x < 0f) ? 0 : v.x;
            v.y = (v.y < 0f) ? 0 : v.y;
        }

        /// <summary>
        /// Ensure a vector's individial values never rise above zero
        /// </summary>
        /// <param name="v">Vector2 instance this method operates on</param>
        public static void ClampValuesNegative(this ref Vector2 v)
        {
            v.x = (v.x > 0f) ? 0 : v.x;
            v.y = (v.y > 0f) ? 0 : v.y;
        }

        /// <summary>
        /// Clamp the individual values of a vector between the provided values
        /// </summary>
        /// <param name="v">Vector2 instance this method operates on</param>
        /// <param name="minMax">Vector clamp between -x to x, -y to y and -z to z</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void ClampValuesBetween(this ref Vector2 v, Vector2 minMax, bool suppressWarnings = false)
        {
            if (minMax == Vector2.zero)
            {
                if (!suppressWarnings || !UnityAdditionsSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector2Extensions)}.{nameof(ClampValuesBetween)} was invoked with minMax:{minMax} whos value was Zero, no action was taken");
                return;
            }

            v.x = (v.x < -minMax.x) ? -minMax.x : (v.x > minMax.x) ? minMax.x : v.x;
            v.y = (v.y < -minMax.y) ? -minMax.y : (v.y > minMax.y) ? minMax.y : v.y;
        }

        /// <summary>
        /// Clamp the individual values of a vector between the provided values
        /// </summary>
        /// <param name="v">Vector2 instance this method operates on</param>
        /// <param name="min">Minimum clamp value for vector x, y and z</param>
        /// <param name="max">Maximum clamp value for vector x, y and z</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void ClampValuesBetween(this ref Vector2 v, Vector2 min, Vector2 max, bool suppressWarnings = false)
        {
            if (min == max)
            {
                if (!suppressWarnings || !UnityAdditionsSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector2Extensions)}.{nameof(ClampValuesBetween)} was invoked with min:{min} and max:{max} whos values were equal, no action was taken");
                return;
            }

            if (max.x < min.x || max.y < min.y)
            {
                if (!UnityAdditionsSettings.SuppressErrors)
                    Debug.LogError($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with min:{min} who possessed a value greater than the corresponding value in max:{max}");
                return;
            }

            v.x = (v.x < min.x) ? min.x : (v.x > max.x) ? max.x : v.x;
            v.y = (v.y < min.y) ? min.y : (v.y > max.y) ? max.y : v.y;
        }

        /// <summary>
        /// Clamp the individual values of a vector between the provided values
        /// </summary>
        /// <param name="v">Vector2 instance this method operates on</param>
        /// <param name="xMinMax">Range to randomize between -<paramref name="xMinMax"/> and <paramref name="xMinMax"/>. Zero behavior dependant on <paramref name="ignoreWhenZero"/> parameter</param>
        /// <param name="yMinMax">Range to randomize between -<paramref name="yMinMax"/> and <paramref name="yMinMax"/>. Zero behavior dependant on <paramref name="ignoreWhenZero"/> parameter</param>
        /// <param name="ignoreWhenZero">Should values clamp when respective range parameter is zero? False if corresponding values should always be zero</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void ClampValuesBetween(this ref Vector2 v, float xMinMax = 0f, float yMinMax = 0f, bool ignoreWhenZero = true, bool suppressWarnings = false)
        {
            if (xMinMax == 0 && yMinMax == 0)
            {
                if (!suppressWarnings || !UnityAdditionsSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with xMinMax:{xMinMax} and yMinMax:{yMinMax} whos values were Zero, no action was taken");
                return;
            }

            v.x = (xMinMax == 0) ? (ignoreWhenZero) ? v.x : 0 : (v.x < -xMinMax) ? -xMinMax : (v.x > xMinMax) ? xMinMax : v.x;
            v.y = (yMinMax == 0) ? (ignoreWhenZero) ? v.y : 0 : (v.y < -yMinMax) ? -yMinMax : (v.y > yMinMax) ? yMinMax : v.y;
        }

        /// <summary>
        /// Clamp the individual values of a vector between the provided values
        /// </summary>
        /// <param name="v">Vector2 instance this method operates on</param>
        /// <param name="xMin">Lower x value clamp. Zero behavior dependant on <paramref name="ignoreWhenZero"/> parameter</param>
        /// <param name="xMax">Upper x value clamp. Zero behavior dependant on <paramref name="ignoreWhenZero"/> parameter</param>
        /// <param name="yMin">Lower y value clamp. Zero behavior dependant on <paramref name="ignoreWhenZero"/> parameter</param>
        /// <param name="yMax">Upper y value clamp. Zero behavior dependant on <paramref name="ignoreWhenZero"/> parameter</param>
        /// <param name="ignoreWhenZero">Should values clamp when respective range parameters are zero? False if corresponding values should always be zero</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void ClampValuesBetween(this ref Vector2 v, float xMin = 0f, float xMax = 0f, float yMin = 0f, float yMax = 0f, bool ignoreWhenZero = true, bool suppressWarnings = false)
        {
            if (xMin == xMax && yMin == yMax)
            {
                if (!suppressWarnings || !UnityAdditionsSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with xMin:{xMin}, xMax:{xMax}, yMin:{yMin} and yMax:{yMax}whos values were Zero, no action was taken");
                return;
            }

            if (xMax < xMin || yMax < yMin)
            {
                if (UnityAdditionsSettings.SuppressErrors)
                    Debug.LogError($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with xMin:{xMin} and yMin:{yMin} who possessed a value greater than the corresponding value of xMax:{xMax} or yMax:{yMax}");
                return;
            }

            v.x = (xMin == xMax) ? (xMin == 0) ? (ignoreWhenZero) ? v.x : 0 : xMin : (v.x < xMin) ? xMin : (v.x > xMax) ? xMax : v.x;
            v.y = (yMin == yMax) ? (yMin == 0) ? (ignoreWhenZero) ? v.y : 0 : yMin : (v.y < yMin) ? yMin : (v.y > yMax) ? yMax : v.y;
        }
        #endregion
    }
}