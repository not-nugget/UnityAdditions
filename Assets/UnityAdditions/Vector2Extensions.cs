using UnityEngine;

namespace UnityAdditions
{
    public static class Vector2Extensions
    {
        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <param name="v">Vector2 isntance this method operates on</param>
        /// <param name="posNegRange">Vector range between -x to x and -y to y</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this ref Vector2 v, Vector2 posNegRange, bool suppressWarnings = false)
        {
            if (posNegRange == Vector2.zero)
            {
                if (!suppressWarnings || !UnityAdditionSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with {posNegRange} whos values were Zero, no action was taken");
                return;
            }

            v.x = (posNegRange.x == 0) ? 0 : Random.Range(-posNegRange.x, posNegRange.x);
            v.y = (posNegRange.y == 0) ? 0 : Random.Range(-posNegRange.y, posNegRange.y);
        }

        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <param name="v">Vector2 isntance this method operates on</param>
        /// <param name="lowerBound"></param>
        /// <param name="upperBound"></param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this ref Vector2 v, Vector2 lowerBound, Vector2 upperBound, bool suppressWarnings = false)
        {
            if (lowerBound == upperBound)
            {
                if (!suppressWarnings || !UnityAdditionSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with lowerBound:{lowerBound} and upperBound:{upperBound} whos values are equal, no action was taken");
                return;
            }

            if (upperBound.x < lowerBound.x || upperBound.y < lowerBound.y)
            {
                if (!UnityAdditionSettings.SuppressErrors)
                    Debug.LogError($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with lowerBound:{lowerBound} who possessed a value greater than the corresponding value in upperBound:{upperBound}");
                return;
            }

            v.x = (lowerBound.x == upperBound.x) ? lowerBound.x : Random.Range(lowerBound.x, upperBound.x);
            v.y = (lowerBound.y == upperBound.y) ? lowerBound.y : Random.Range(lowerBound.y, upperBound.y);
        }

        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <param name="v">Vector2 isntance this method operates on</param>
        /// <param name="xRange"></param>
        /// <param name="yRange"></param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this ref Vector2 v, float xRange = 0f, float yRange = 0f, bool suppressWarnings = false)
        {
            if (xRange == 0 && yRange == 0)
            {
                if (!suppressWarnings || !UnityAdditionSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with {xRange} and {yRange} whos values were Zero, no action was taken");
                return;
            }

            v.x = (xRange == 0) ? 0 : Random.Range(-xRange, xRange);
            v.y = (yRange == 0) ? 0 : Random.Range(-yRange, yRange);
        }

        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <param name="v">Vector2 isntance this method operates on</param>
        /// <param name="xLower"></param>
        /// <param name="xUpper"></param>
        /// <param name="yLower"></param>
        /// <param name="yUpper"></param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void Randomizevalues(this ref Vector2 v, float xLower = 0f, float xUpper = 0f, float yLower = 0f, float yUpper = 0f, bool suppressWarnings = false)
        {
            if (xLower == xUpper && yLower == yUpper)
            {
                if (!suppressWarnings || !UnityAdditionSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with xLower:{xLower}, xUpper:{xUpper}, yLower:{yLower} and yUpper:{yUpper} whos values were Zero, no action was taken");
                return;
            }

            if (xUpper < xLower || yUpper < yLower)
            {
                if (!UnityAdditionSettings.SuppressErrors)
                    Debug.LogError($"{nameof(Vector2Extensions)}.{nameof(RandomizeValues)} was invoked with xLower:{xLower} and yLower:{yLower} who possessed a value greater than the corresponding value of xUpper:{xUpper} or yUpper{yUpper}");
                return;
            }

            v.x = (xLower == xUpper) ? xLower : Random.Range(xLower, xUpper);
            v.y = (yLower == yUpper) ? yLower : Random.Range(yLower, yUpper);
        }

        /// <summary>
        /// Randomize the values of a vector within a provided rectangle. NOTE: Provided coordinates will be in WORLD COORDINATES, as Rect stores
        /// its coordinates as such.
        /// </summary>
        /// <param name="v">Vector2 isntance this method operates on</param>
        /// <param name="randomizeInside">Rectangle to keep the vector inside</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeInside(this ref Vector2 v, Rect randomizeInside, bool suppressWarnings = false)
        {
            if (randomizeInside.size == Vector2.zero)
            {
                if (!suppressWarnings || !UnityAdditionSettings.SuppressWarnings)
                    Debug.LogWarning("UnityExtensions.RandomizeInside(Rect) was called but given a Rect object whos size is zero. Was this intentional?");
                return;
            }

            Vector2 min = randomizeInside.min, max = randomizeInside.max;
            v.x = (min.x == max.x) ? min.x : Random.Range(min.x, max.x);
            v.y = (min.y == max.y) ? min.y : Random.Range(min.y, max.y);
        }
    }
}