namespace UnityAdditions.Vector4
{
    using UnityEngine;

    /// <summary>
    /// Suite of extension methods for randomizing the x, y and z values of any vector 3
    /// </summary>
    public static class Vector4Extensions
    {
        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <param name="v">Vector4 instance this method operates on</param>
        /// <param name="posNegRange">Vector range between -x to x, -y to y, -z to z, and -w to w</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this ref Vector4 v, Vector4 posNegRange, bool suppressWarnings = false)
        {
            if (posNegRange == Vector4.zero)
            {
                if (!suppressWarnings || !UnityAdditionSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector4Extensions)}.{nameof(RandomizeValues)} was invoked with {posNegRange} whos value was Zero, no action was taken");
                return;
            }

            if (UnityAdditionSettings.UseMathematics)
            {
                Unity.Mathematics.Random r = new Unity.Mathematics.Random();

                v.x = (posNegRange.x == 0) ? 0 : r.NextFloat(-posNegRange.x, posNegRange.x);
                v.y = (posNegRange.y == 0) ? 0 : r.NextFloat(-posNegRange.y, posNegRange.y);
                v.z = (posNegRange.z == 0) ? 0 : r.NextFloat(-posNegRange.z, posNegRange.z);
                v.w = (posNegRange.w == 0) ? 0 : r.NextFloat(-posNegRange.w, posNegRange.w);
            }
            else
            {
                v.x = (posNegRange.x == 0) ? 0 : UnityEngine.Random.Range(-posNegRange.x, posNegRange.x);
                v.y = (posNegRange.y == 0) ? 0 : UnityEngine.Random.Range(-posNegRange.y, posNegRange.y);
                v.z = (posNegRange.z == 0) ? 0 : UnityEngine.Random.Range(-posNegRange.z, posNegRange.z);
                v.w = (posNegRange.w == 0) ? 0 : UnityEngine.Random.Range(-posNegRange.w, posNegRange.w);
            }
        }

        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <remarks>Method can error out</remarks>
        /// <param name="v">Vector4 instance this method operates on</param>
        /// <param name="lowerBound">Lower bound for vector x, y, z and w values</param>
        /// <param name="upperBound">Upper bound for vector x, y, z and w values</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this ref Vector4 v, Vector4 lowerBound, Vector4 upperBound, bool suppressWarnings = false)
        {
            if (lowerBound == upperBound)
            {
                if (!suppressWarnings || !UnityAdditionSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector4Extensions)}.{nameof(RandomizeValues)} was invoked with lowerBound:{lowerBound} and upperBound:{upperBound} whos values were equal, no action was taken");
                return;
            }
            if (upperBound.x < lowerBound.x || upperBound.y < lowerBound.y || upperBound.z < lowerBound.z || lowerBound.w < upperBound.w)
            {
                if (!UnityAdditionSettings.SuppressErrors)
                    Debug.LogError($"{nameof(Vector4Extensions)}.{nameof(RandomizeValues)} was invoked with lowerBound:{lowerBound} who possessed a value greater than the corresponding value in upperBound:{upperBound}");
                return;
            }

            v.x = (lowerBound.x == upperBound.x) ? lowerBound.x : Random.Range(lowerBound.x, upperBound.x);
            v.y = (lowerBound.y == upperBound.y) ? lowerBound.y : Random.Range(lowerBound.y, upperBound.y);
            v.z = (lowerBound.z == upperBound.z) ? lowerBound.z : Random.Range(lowerBound.z, upperBound.z);
            v.w = (lowerBound.w == upperBound.w) ? lowerBound.w : Random.Range(lowerBound.w, upperBound.w);
        }

        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively. Will warn when all values passed are zero.
        /// </summary>
        /// <param name="v">Vector4 instance this method operates on</param>
        /// <param name="xRange">Range to randomize between -xRange and xRange. Ignored when value is zero</param>
        /// <param name="yRange">Range to randomize between -yRange and yRange. Ignored when value is zero</param>
        /// <param name="zRange">Range to randomize between -zRange and zRange. Ignored when value is zero</param>
        /// <param name="wRange">Range to randomize between -wRange and wRange. Ignored when value is zero</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this ref Vector4 v, float xRange = 0f, float yRange = 0f, float zRange = 0f, float wRange = 0f, bool suppressWarnings = false)
        {
            if (xRange == 0 && yRange == 0 && zRange == 0)
            {
                if (!suppressWarnings || !UnityAdditionSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector4Extensions)}.{nameof(RandomizeValues)} was invoked with xRange:{xRange}, yRange:{yRange}, zRange:{zRange} and wRange:{wRange} whos values were Zero, no action was taken");
                return;
            }

            v.x = (xRange == 0) ? 0 : Random.Range(-xRange, xRange);
            v.y = (yRange == 0) ? 0 : Random.Range(-yRange, yRange);
            v.z = (zRange == 0) ? 0 : Random.Range(-zRange, zRange);
            v.w = (wRange == 0) ? 0 : Random.Range(-wRange, wRange);
        }

        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively. Will warn when all values passed are zero and
        /// will error if any value's upper bound is less than its corresponding lower bound and UnityExtensions.SuppressErrors is false.
        /// </summary>
        /// <remarks>Method can error out</remarks>
        /// <param name="v">Vector4 instance this method operates on</param>
        /// <param name="xLower">Lower x value bound</param>
        /// <param name="xUpper">Upper x value bound</param>
        /// <param name="yLower">Lower y value bound</param>
        /// <param name="yUpper">Upper y value bound</param>
        /// <param name="zLower">Lower z value bound</param>
        /// <param name="zUpper">Upper z value bound</param>
        /// <param name="wLower">Lower w value bound</param>
        /// <param name="wUpper">Upper w value bound</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this ref Vector4 v, float xLower = 0f, float xUpper = 0f, float yLower = 0f, float yUpper = 0f, float zLower = 0f, float zUpper = 0f, float wLower = 0f, float wUpper = 0f, bool suppressWarnings = false)
        {
            if (xLower == 0 && xUpper == 0 && yLower == 0 && yUpper == 0 && zLower == 0 && zUpper == 0 && wLower == 0 && wUpper == 0)
            {
                if (!suppressWarnings || !UnityAdditionSettings.SuppressWarnings)
                    Debug.LogWarning($"{nameof(Vector4Extensions)}.{nameof(RandomizeValues)} was invoked with xLower:{xLower}, xUpper:{xUpper}, yLower:{yLower}, yUpper:{yUpper}, zLower:{zLower}, zUpper:{zUpper}, wLower:{wLower} and wUpper:{wUpper} whos values were Zero, no action was taken");
                return;
            }

            if (xUpper < xLower || yUpper < yLower || zUpper < zLower || wUpper < wLower)
            {
                if (!UnityAdditionSettings.SuppressErrors)
                    Debug.LogError($"{nameof(Vector4Extensions)}.{nameof(RandomizeValues)} was invoked with xLower:{xLower}, yLower:{yLower}, zLower:{zLower} and wLower:{wLower} who possessed a value greater than the corresponding value of xUpper:{xUpper}, yUpper:{yUpper}, zUpper:{zUpper}, or wUpper:{wUpper}");
                return;
            }

            v.x = (xLower == xUpper) ? xLower : Random.Range(xLower, xUpper);
            v.y = (yLower == yUpper) ? yLower : Random.Range(yLower, yUpper);
            v.z = (zLower == zUpper) ? zLower : Random.Range(zLower, zUpper);
            v.w = (wLower == wUpper) ? wLower : Random.Range(wLower, wUpper);
        }
    }
}