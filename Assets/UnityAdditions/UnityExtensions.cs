using UnityEngine;

namespace UnityAdditions.Extensions
{
    public static class UnityExtensions
    {
        #region Properties
        /// <summary>
        /// Suppress all warnings that would be generated by methods upon incorrect input being provided. Use if your code is intentionally
        /// operating and the thrown warnings do not apply to you. NOTE: This can be done on a per-incovation basis as opposed to class-wide.
        /// </summary>
        public static bool SuppressWarnings { get; set; } = false;

        /// <summary>
        /// Suppress any error that is thrown because of bad input. NOT RECCOMMENDED
        /// </summary>
        public static bool SuppressErrors { get; set; } = false;
        #endregion

        #region UnityEngine.Vector3 Extension methods
        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <param name="v">Vector3 instance this method operates on</param>
        /// <param name="posNegRange">Vector range between -x to x, -y to y, and -z to z</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this Vector3 v, Vector3 posNegRange, bool suppressWarnings = false)
        {
            if (posNegRange == Vector3.zero)
            {
                if (!suppressWarnings || !SuppressWarnings)
                    //Debug.LogWarning("UnityExtensions.RandomizeValues(Vector3) was called but not given a valid value to randomize based on. Was this intentional?");
                    Debug.LogWarning($"{nameof(UnityExtensions)}.{nameof(RandomizeValues)} was invoked with {posNegRange} whos value was Zero, no action was taken");
                return;
            }

            v.x = (posNegRange.x == 0) ? 0 : Random.Range(-posNegRange.x, posNegRange.x);
            v.y = (posNegRange.y == 0) ? 0 : Random.Range(-posNegRange.y, posNegRange.y);
            v.y = (posNegRange.y == 0) ? 0 : Random.Range(-posNegRange.y, posNegRange.y);
        }

        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <remarks>Method can error out</remarks>
        /// <param name="v">Vector3 instance this method operates on</param>
        /// <param name="lowerBound">Lower bound for vector x, y and z values</param>
        /// <param name="upperBound">Upper bound for vector x, y and z values</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this Vector3 v, Vector3 lowerBound, Vector3 upperBound, bool suppressWarnings = false)
        {
            if (lowerBound == upperBound)
            {
                if (!suppressWarnings || !SuppressWarnings)
                    //Debug.LogWarning("UnityExtensions.RandomizeValues(Vector3, Vector3) was called but not given any value range to randomize between. Was this intentional?");
                    Debug.LogWarning($"{nameof(UnityExtensions)}.{nameof(RandomizeValues)} was invoked with lowerBound:{lowerBound} and upperBound:{upperBound} whos values were equal, no action was taken");
                return;
            }
            if (upperBound.x < lowerBound.x || upperBound.y < lowerBound.y || upperBound.z < lowerBound.z)
            {
                if (!SuppressErrors)
                    //Debug.LogError("UnityExtensions.RandomizeValues(Vector3, Vector3) was called and given bad input: a lower bound was greater than an upper bound.");
                    Debug.LogError($"{nameof(UnityExtensions)}.{nameof(RandomizeValues)} was invoked with lowerBound:{lowerBound} who possessed a value greater than the corresponding value in upperBound:{upperBound}");
                return;
            }

            v.x = (lowerBound.x == upperBound.x) ? lowerBound.x : Random.Range(lowerBound.x, upperBound.x);
            v.y = (lowerBound.y == upperBound.y) ? lowerBound.y : Random.Range(lowerBound.y, upperBound.y);
            v.z = (lowerBound.z == upperBound.z) ? lowerBound.z : Random.Range(lowerBound.z, upperBound.z);
        }

        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively. Will warn when all values passed are zero.
        /// </summary>
        /// <param name="v">Vector3 instance this method operates on</param>
        /// <param name="xRange">Range to randomize between -xRange and xRange. Ignored when value is zero</param>
        /// <param name="yRange">Range to randomize between -yRange and yRange. Ignored when value is zero</param>
        /// <param name="zRange">Range to randomize between -zRange and zRange. Ignored when value is zero</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomzeValues(this Vector3 v, float xRange = 0f, float yRange = 0f, float zRange = 0f, bool suppressWarnings = false)
        {
            if (xRange == 0 && yRange == 0 && zRange == 0)
            {
                if (!suppressWarnings)
                    Debug.LogWarning($"{nameof(UnityExtensions)}.{nameof(RandomizeValues)} was invoked with {xRange} and {yRange} whos value was Zero, no action was taken");
                return;
            }

            v.x = (xRange == 0) ? 0 : Random.Range(-xRange, xRange);
            v.y = (yRange == 0) ? 0 : Random.Range(-yRange, yRange);
            v.z = (zRange == 0) ? 0 : Random.Range(-zRange, zRange);
        }

        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively. Will warn when all values passed are zero and
        /// will error if any value's upper bound is less than its corresponding lower bound and UnityExtensions.SuppressErrors is false.
        /// </summary>
        /// <remarks>Method can error out</remarks>
        /// <param name="v">Vector3 instance this method operates on</param>
        /// <param name="xLower">Lower x value bound</param>
        /// <param name="xUpper">Upper x value bound</param>
        /// <param name="yLower">Lower y value bound</param>
        /// <param name="yUpper">Upper y value bound</param>
        /// <param name="zLower">Lower z value bound</param>
        /// <param name="zUpper">Upper z value bound</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this Vector3 v, float xLower = 0f, float xUpper = 0f, float yLower = 0f, float yUpper = 0f, float zLower = 0f, float zUpper = 0f, bool suppressWarnings = false)
        {
            if (xLower == 0 && xUpper == 0 && yLower == 0 && yUpper == 0 && zLower == 0 && zUpper == 0)
            {
                if (!suppressWarnings)
                    Debug.LogWarning($"{nameof(UnityExtensions)}.{nameof(RandomizeValues)} was invoked with xLower:{xLower}, xUpper:{xUpper}, yLower:{yLower}, yUpper:{yUpper}, zLower:{zLower} and zUpper:{zUpper} whos values were Zero, no action was taken");
                return;
            }

            if (xUpper < xLower || yUpper < yLower || zUpper < zLower)
            {
                if (!SuppressErrors)
                    Debug.LogError($"{nameof(UnityExtensions)}.{nameof(RandomizeValues)} was invoked with xLower:{xLower}, yLower:{yLower}, and zLower:{zLower} who possessed a value greater than the corresponding value of xUpper:{xUpper}, yUpper{yUpper}, or zUpper{zUpper}");
                return;
            }

            v.x = (xLower == xUpper) ? xLower : Random.Range(xLower, xUpper);
            v.y = (yLower == yUpper) ? yLower : Random.Range(yLower, yUpper);
            v.z = (zLower == zUpper) ? zLower : Random.Range(zLower, zUpper);
        }

        /// <summary>
        /// Randomize the values of a vector within a provided boundary. NOTE: Provided coordinates will be in WORLD COORDINATES, as Bounds stores
        /// its coordinates as such.
        /// </summary>
        /// <param name="v">Vector3 instance this method operates on</param>
        /// <param name="randomizeInside">Boundary to keep the vector inside</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeWithin(this Vector3 v, Bounds randomizeInside, bool suppressWarnings = false)
        {
            if (randomizeInside.size == Vector3.zero)
            {
                if (!suppressWarnings || !SuppressWarnings)
                    //Debug.LogWarning("UnityExtensions.RandomizeWithin(Bounds) was called but given a Bounds object whos size is zero. Was this intentional?");
                    Debug.LogWarning($"{nameof(UnityExtensions)}.{nameof(RandomizeValues)} was invoked with {randomizeInside} whos size was Zero, no action was taken");
                return;
            }

            Vector3 min = randomizeInside.min, max = randomizeInside.max;
            v.x = (min.x == max.x) ? min.x : Random.Range(min.x, max.x);
            v.y = (min.y == max.y) ? min.y : Random.Range(min.y, max.y);
            v.z = (min.z == max.z) ? min.z : Random.Range(min.z, max.z);
        }

        #endregion
        #region UnityEngine.Vector2 Extension methods
        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <param name="v">Vector2 isntance this method operates on</param>
        /// <param name="posNegRange">Vector range between -x to x and -y to y</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this Vector2 v, Vector2 posNegRange, bool suppressWarnings = false)
        {
            if (posNegRange == Vector2.zero)
            {
                if (!suppressWarnings || !SuppressWarnings)
                    Debug.LogWarning($"{nameof(UnityExtensions)}.{nameof(RandomizeValues)} was invoked with {posNegRange} whos values were Zero, no action was taken");
                return;
            }

            v.x = (posNegRange.x == 0) ? 0 : Random.Range(-posNegRange.x, posNegRange.x);
            v.y = (posNegRange.y == 0) ? 0 : Random.Range(-posNegRange.y, posNegRange.y);
        }

        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <param name="v">Vector2 isntance this method operates on</param>
        /// <param name="lowerBound"></param>
        /// <param name="upperBound"></param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this Vector2 v, Vector2 lowerBound, Vector2 upperBound, bool suppressWarnings = false)
        {
            if (lowerBound == upperBound)
            {
                if (!suppressWarnings || !SuppressWarnings)
                    Debug.LogWarning($"{nameof(UnityExtensions)}.{nameof(RandomizeValues)} was invoked with lowerBound:{lowerBound} and upperBound:{upperBound} whos values are equal, no action was taken");
                return;
            }

            if (upperBound.x < lowerBound.x || upperBound.y < lowerBound.y)
            {
                if (!SuppressErrors)
                    Debug.LogError($"{nameof(UnityExtensions)}.{nameof(RandomizeValues)} was invoked with lowerBound:{lowerBound} who possessed a value greater than the corresponding value in upperBound:{upperBound}");
                return;
            }

            v.x = (lowerBound.x == upperBound.x) ? lowerBound.x : Random.Range(lowerBound.x, upperBound.x);
            v.y = (lowerBound.y == upperBound.y) ? lowerBound.y : Random.Range(lowerBound.y, upperBound.y);
        }

        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <param name="v">Vector2 isntance this method operates on</param>
        /// <param name="xRange"></param>
        /// <param name="yRange"></param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeValues(this Vector2 v, float xRange = 0f, float yRange = 0f, bool suppressWarnings = false)
        {
            if (xRange == 0 && yRange == 0)
            {
                if (!suppressWarnings || !SuppressWarnings)
                    Debug.LogWarning($"{nameof(UnityExtensions)}.{nameof(RandomizeValues)} was invoked with {xRange} and {yRange} whos values were Zero, no action was taken");
                return;
            }

            v.x = (xRange == 0) ? 0 : Random.Range(-xRange, xRange);
            v.y = (yRange == 0) ? 0 : Random.Range(-yRange, yRange);
        }

        /// <summary>
        /// Randomize the values of a vector using the provided input inclusively
        /// </summary>
        /// <param name="v">Vector2 isntance this method operates on</param>
        /// <param name="xLower"></param>
        /// <param name="xUpper"></param>
        /// <param name="yLower"></param>
        /// <param name="yUpper"></param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void Randomizevalues(this Vector2 v, float xLower = 0f, float xUpper = 0f, float yLower = 0f, float yUpper = 0f, bool suppressWarnings = false)
        {
            if (xLower == xUpper && yLower == yUpper)
            {
                if (!suppressWarnings || !SuppressWarnings)
                    Debug.LogWarning($"{nameof(UnityExtensions)}.{nameof(RandomizeValues)} was invoked with xLower:{xLower}, xUpper:{xUpper}, yLower:{yLower} and yUpper:{yUpper} whos values were Zero, no action was taken");
                return;
            }

            if (xUpper < xLower || yUpper < yLower)
            {
                if (!SuppressErrors)
                    Debug.LogError($"{nameof(UnityExtensions)}.{nameof(RandomizeValues)} was invoked with xLower:{xLower} and yLower:{yLower} who possessed a value greater than the corresponding value of xUpper:{xUpper} or yUpper{yUpper}");
                return;
            }

            v.x = (xLower == xUpper) ? xLower : Random.Range(xLower, xUpper);
            v.y = (yLower == yUpper) ? yLower : Random.Range(yLower, yUpper);
        }

        /// <summary>
        /// Randomize the values of a vector within a provided rectangle. NOTE: Provided coordinates will be in WORLD COORDINATES, as Rect stores
        /// its coordinates as such.
        /// </summary>
        /// <param name="v">Vector2 isntance this method operates on</param>
        /// <param name="randomizeInside">Rectangle to keep the vector inside</param>
        /// <param name="suppressWarnings">Suppress warnings which would otherwise be generated by this method</param>
        public static void RandomizeInside(this Vector2 v, Rect randomizeInside, bool suppressWarnings = false)
        {
            if (randomizeInside.size == Vector2.zero)
            {
                if (!suppressWarnings || !SuppressWarnings)
                    Debug.LogWarning("UnityExtensions.RandomizeInside(Rect) was called but given a Rect object whos size is zero. Was this intentional?");
                return;
            }

            Vector2 min = randomizeInside.min, max = randomizeInside.max;
            v.x = (min.x == max.x) ? min.x : Random.Range(min.x, max.x);
            v.y = (min.y == max.y) ? min.y : Random.Range(min.y, max.y);
        }
        #endregion
    }
}