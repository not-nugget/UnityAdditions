using UnityEngine;

namespace UnityAdditions.Extensions
{
    /// <summary>
    /// Suite of extension methods that provide further functionality to Vector2 instances
    /// </summary>
    public static class Vec2Ext
    {
        /// <summary>
        /// Randomize the values of a Vector2 based on the provided input
        /// </summary>
        /// <param name="v">Vector2 reference to modify</param>
        /// <param name="range">Inclusive range to randomize between. <c>[-<paramref name="range"/>..<paramref name="range"/>]</c></param>
        /// <param name="suppressWarnings">Suppress the warnings that would otherwise be generated by this method</param>
        public static void RandomizeValues(ref this Vector2 v, Vector2 range, bool suppressWarnings = false)
        {
            if (range == Vector2.zero)
            {
                if (!suppressWarnings || !UnityAdditionsSettings.SuppressWarnings)
                    Warn($"{nameof(Vec2Ext)}.{nameof(RandomizeValues)} cannot randomize between the provided range: [{-range}..{range}]");
                return;
            }

            v.x = (range.x == 0f) ? v.x : RandomBetween(-range.x, range.x);
            v.y = (range.y == 0f) ? v.y : RandomBetween(-range.y, range.y);
        }
        /// <summary>
        /// Randomize the values of a Vector2 based on the provided input
        /// </summary>
        /// <param name="v">Vector2 reference to modify</param>
        /// <param name="lower">Inclusive lower bound</param>
        /// <param name="upper">Inclusive upper bound</param>
        /// <param name="suppressWarnings">Suppress the warnings that would otherwise be generated by this method</param>
        public static void RandomizeValues(ref this Vector2 v, Vector2 lower, Vector2 upper, bool suppressWarnings = false)
        {
            if (lower == upper)
            {
                if (!suppressWarnings || !UnityAdditionsSettings.SuppressWarnings)
                    Warn($"{nameof(Vec2Ext)}.{nameof(RandomizeValues)} cannot randomize between the provided range: [{lower}..{upper}]");
                return;
            }

            if (upper.x < lower.x || upper.y < lower.y)
            {
                if (!UnityAdditionsSettings.SuppressErrors)
                    Error($"{nameof(Vec2Ext)}.{nameof(RandomizeValues)} provided range minimum: {lower} has greater components than the corresponding maximum: {upper}");
                return;
            }

            v.x = (lower.x == 0f && upper.x == 0f) ? v.x : (lower.x == upper.x) ? lower.x : RandomBetween(lower.x, upper.x);
            v.y = (lower.y == 0f && upper.y == 0f) ? v.y : (lower.y == upper.y) ? lower.y : RandomBetween(lower.y, upper.y);
        }
        /// <summary>
        /// Randomize the values of a Vector2 based on the provided input
        /// </summary>
        /// <param name="v">Vector2 reference to modify</param>
        /// <param name="xLower">Inclusive lower x bound</param>
        /// <param name="xUpper">Inclusive upper x bound</param>
        /// <param name="yLower">Inclusive lower y bound</param>
        /// <param name="yUpper">Inclusive upper y bound</param>
        /// <param name="suppressWarnings">Suppress the warnings that would otherwise be generated by this method</param>
        public static void RandomizeValues(ref this Vector2 v, float xLower = 0f, float xUpper = 0f, float yLower = 0f, float yUpper = 0f, bool suppressWarnings = false)
        {
            if (xLower == 0f && xUpper == 0f && yLower == 0f && yUpper == 0f)
            {
                if (!suppressWarnings || !UnityAdditionsSettings.SuppressWarnings)
                    Warn($"{nameof(Vec2Ext)}.{nameof(RandomizeValues)} cannot randomize between the provided ranges: x[{xLower}..{xUpper}] y[{yUpper}..{yLower}]");
                return;
            }

            if (xLower < xUpper || yLower < yUpper)
            {
                if (!UnityAdditionsSettings.SuppressErrors)
                    Error($"{nameof(Vec2Ext)}.{nameof(RandomizeValues)} provided range minimums: {xLower} and {yLower} are greater than corresponding maximums: {xUpper} and {yUpper}");
                return;
            }

            v.x = (xLower == 0f && xUpper == 0f) ? v.x : (xLower == xUpper) ? xLower : RandomBetween(xLower, xUpper);
            v.y = (yLower == 0f && yUpper == 0f) ? v.y : (yLower == yUpper) ? yLower : RandomBetween(yLower, yUpper);
        }

        //clamping methods (maybe)

        /// <summary>
        /// Randomize the values of a Vector2 such that they never exceed the provided boundary
        /// </summary>
        /// <param name="v">Vector2 reference to modify</param>
        /// <param name="rect">Boundary to get a random point within</param>
        /// <param name="suppressWarnings">Suppress the warnings that would otherwise be generated by this method</param>
        public static void RandomizeWithin(ref this Vector2 v, Rect rect, bool suppressWarnings = false)
        {
            if (rect.size == Vector2.zero)
            {
                if (!suppressWarnings || UnityAdditionsSettings.SuppressWarnings)
                    Warn($"{nameof(Vec2Ext)}.{nameof(RandomizeWithin)} cannot randomize within the provided boundary: {rect}");
                return;
            }

            RandomWithin(ref v, rect, Vector2.zero);
        }
        /// <summary>
        /// Randomize the values of a Vector2 such that they never exceed the provided boundary(Rect)
        /// </summary>
        /// <param name="v">Vector2 reference to modify</param>
        /// <param name="rect">Boundary to get a random point within</param>
        /// <param name="padding">Padding to offset the acquired point by</param>
        /// <param name="suppressWarnings">Suppress the warnings that would otherwise be generated by this method</param>
        public static void RandomizeWithin(ref this Vector2 v, Rect rect, Vector2 padding, bool suppressWarnings = false)
        {
            if (rect.size == Vector2.zero)
            {
                if (!suppressWarnings || UnityAdditionsSettings.SuppressWarnings)
                    Warn($"{nameof(Vec2Ext)}.{nameof(RandomizeWithin)} cannot randomize within the provided boundary: {rect}");
                return;
            }

            if (padding == Vector2.zero && !suppressWarnings && !UnityAdditionsSettings.SuppressWarnings)
                Warn($"{nameof(Vec2Ext)}.{nameof(RandomizeWithin)} was provided with a padding of {padding}. Consider omitting the argument");

            RandomWithin(ref v, rect, padding);
        }
        static void RandomWithin(ref Vector2 v, Rect rect, Vector2 padding)
        {
            Vector2 min = rect.min + padding, max = rect.max - padding;

            v.x = RandomBetween(min.x, max.x);
            v.y = RandomBetween(min.y, max.y);
        }

        static float RandomBetween(float min, float max) => UnityEngine.Random.Range(min, max);
        static void Warn(string message) => Debug.LogWarning(message);
        static void Error(string message) => Debug.LogError(message);
    }
}
